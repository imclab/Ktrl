Ktrl=function(){function f(a){this.input=a;this.targets=[];var b=this;this.input.onmidimessage=function(a){for(var c=b.targets.length;c--;)b.targets[c].ondata(a)}}function g(a){this.id=j++;this.label=a||"Untitled";this.active=!1;this.process=function(){};var b=this;this.ondata=function(a){b.active&&b.process(a)};e.push(this)}function c(a){console.log("[ktrl] "+a)}var d=[],e=[],j=0,h=null;f.prototype={constructor:f,removeTarget:function(a){var b=this;this.targets.map(function(c){c===a&&(c=b.targets.indexOf(a),
b.targets.splice(c,1))})},addTarget:function(a){for(var b=0;b<this.targets.length;++b)if(this.targets[b]===a){c("duplicate target.");return}this.targets.push(a)}};g.prototype={constructor:g,onData:function(a){this.process=a},activate:function(){this.active=!0},disable:function(){this.active=!1},getID:function(){return this.id}};parse=function(a){a=a.data;var b=(a[0]&15)+1,c;switch(a[0]>>4){case 8:c={type:"noteoff",channel:b,pitch:a[1],velocity:a[2]};break;case 9:c={type:"noteon",channel:b,pitch:a[1],
velocity:a[2]};break;case 10:c={type:"polypressure",channel:b,pitch:a[1],pressure:a[2]};break;case 11:c={type:"controlchange",channel:b,control:a[1],value:a[2]};break;case 12:c={type:"programchange",channel:b,program:a[1]};break;case 13:c={type:"channelpressure",channel:b,pressure:a[1]};break;case 14:c={type:"pitchwheel",channel:b,wheel:a[1]<<8|a[2]}}return c};navigator.requestMIDIAccess().then(function(a){if(0===a.inputs().length)c("no input ports available");else{for(var b=0;b<a.inputs().length;++b)d[b]=
new f(a.inputs()[b]);c("Ktrl (r1) is ready.");"function"===typeof h?h():c("onReady is not specified.")}},function(a){c("failed to get MIDI access: "+a)});return{createTarget:function(a){return new g(a)},removeTarget:function(a){return Ktrl.disconnectTarget(a)?(e.map(function(b){b===a&&(b=e.indexOf(a),e.splice(b,1))}),!0):!1},disconnectTarget:function(a){if("MIDITarget"!==a.constructor.name)return c("invalid argument. (must use MIDITarget)"),!1;d.map(function(b){b.removeTarget(a)});return!0},routeAllToTarget:function(a){if("MIDITarget"!==
a.constructor.name)return c("invalid argument. (must use MIDITarget)"),!1;d.map(function(b){b.addTarget(a)});return!0},routeSourceToTarget:function(a,b){if(a<d.length&&"MIDITarget"===b.constructor.name)return d.map(function(a){a.removeTarget(b)}),d[a].addTarget(b),!0;c("invalid source id or target.");return!1},ready:function(a){"function"!==typeof a?c("invalid handler function."):h=a},parse:parse,report:function(){var a=0;c("listing available MIDI Input Ports...");d.map(function(b){console.log(b.input.type,
a++,"\t",b.input.name,"\t",b.input.manufacturer)});c("listing available MIDI targets...");e.map(function(a){console.log("id "+a.id,"\t",a.label,"\t",a.active)})}}}();
