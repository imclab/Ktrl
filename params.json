{"name":"Ktrl","tagline":"JavaScript Library for Web MIDI API","body":"Ktrl\r\n====\r\n**JavaScript Library for Web MIDI API**\r\n\r\nKtrl is a JavaScript library that provides an abstract layer for all available MIDI input sources on the system and a convenient MIDI message routing system. It is built on top of Web MIDI API, which is currently available on the Chrome Canary build. (Version 30.0.1553.2 and beyond)\r\n\r\n## Prerequisites\r\n1. [MIDI controller(s)](https://www.google.com/search?q=MIDI+controller&source=lnms&tbm=isch&biw=1734&bih=1128&sei=q0fbUdlMwuWIArn1gfAJ)\r\n\r\n2. Mac (at the moment. sorry.)\r\n\r\n3. Chrome Canary build with Web MIDI API flag enabled\r\n\r\n![Enabling MIDI API flag on Chrome Canary](etc/chrome-flag.png \"Enabling MIDI API flag on Chrome Canary\")\r\n\r\n## How to use\r\n```html\r\n<script src=\"https://github.com/hoch/ktrl/raw/master/ktrl.js\"></script>\r\n```\r\n\r\n## Example usage\r\n```javascript\r\n// create MIDI target (i.e. a synth)\r\nvar t = Ktrl.createTarget(\"mySynth\");\r\n\r\n// define MIDI data handler\r\nt.onData(function (midimessage) {\r\n  var data = Ktrl.parse(midimessage);\r\n  console.log(t.label, data);\r\n});\r\n\r\n// prepare MIDI API and route up\r\nKtrl.ready(function () {\r\n  // route all MIDI inputs to the target\r\n  Ktrl.routeAllToTarget(t);\r\n  \r\n  // active target\r\n  t.activate();\r\n});\r\n```\r\n\r\n## Methods\r\n\r\n#### Ktrl.report()\r\n\r\nreports available MIDI sources and targets.\r\n\r\n```javascript\r\n> Ktrl.report()\r\n  [ktrl] listing available MIDI sources...\r\n  source 0   MIDI IN   KORG INC.\r\n  source 1   PORT A    KORG INC.\r\n  source 2   PORT B    KORG INC.\r\n  source 3   Nocturn Keyboard    Novation\r\n  [ktrl] listing available MIDI targets...\r\n  target 0   mySynth   true\r\n  target 1   myDrums   false \r\n```\r\n\r\n#### Ktrl.createTarget(label)\r\n\r\ncreates a MIDI target with label.\r\n\r\n```javascript\r\nvar t = Ktrl.createTarget(\"mySynth\");\r\n\r\nt.onData(function (midimessage) {\r\n  // here goes user-defined MIDI action\r\n});\r\n```\r\n\r\n#### Ktrl.routeAllToTarget(target)\r\n\r\nroutes all available sources to a specified target. (all to one mapping) Note that this method can only be completed after Ktrl is ready. Use inside `Ktrl.ready()` method.\r\n\r\n```javascript\r\nKtrl.ready(function () {\r\n  // myTarget is defined beforehand...\r\n  Ktrl.routeAllToTarget(myTarget);\r\n});\r\n```\r\n\r\n#### Ktrl.routeSourceToTarget(sourceId, target)\r\n\r\nroutes a specified source to a target. (one to one mapping) Note that this method can only be completed after Ktrl is ready. Use inside `Ktrl.ready()` method. The source ID can be retrieved by pinging `Ktrl.report()`.\r\n\r\n```javascript\r\nKtrl.ready(function () {\r\n  // myTarget is defined beforehand...\r\n  Ktrl.routeSourceToTarget(1, myTarget);\r\n});\r\n```\r\n\r\n#### Ktrl.disconnectTarget(target)\r\n\r\ndisconnects a target from all sources keeping it available in Ktrl system.\r\n\r\n```javascript\r\n// myTarget is defined somewhere...\r\nKtrl.disconnectTarget(myTarget);\r\n```\r\n\r\n#### Ktrl.removeTarget(target)\r\n\r\nremoves a target from Ktrl system. also disconnects it from all the source beforehand.\r\n\r\n```javascript\r\n// myTarget is defined somewhere...\r\nKtrl.removeTarget(myTarget);\r\n```\r\n\r\n#### Ktrl.ready(function)\r\n\r\nsets user-defined actions to be executed when Ktrl is ready.\r\n\r\n```javascript\r\nKtrl.ready(function () {\r\n  // do stuff here when Ktrl is done with probing MIDI assests\r\n  Ktrl.report();\r\n  Ktrl.routeAllToTarget(myTarget);\r\n});\r\n```\r\n\r\n#### Ktrl.parse(MIDIMessage)\r\n\r\nparses MIDI message into JavaScript-friendly form. A returned object varies according to the MIDI data type.\r\n\r\n```javascript\r\n[\"noteoff\", \"noteon\"]: { type, channel, pitch, velocity }\r\n[\"polypressure\"]: { type, channel, pitch, pressure } \r\n[\"controlchange\"]: { type, channel, control, value } \r\n[\"programchange\"]: { type, channel, program } \r\n[\"channelpressure\"]: { type, channel, pressure } \r\n[\"pitchwheel\"]: { type, channel, wheel } \r\n```\r\n\r\nUsually it should be used in conjunction with `target.onData()` method to specify the action for various MIDI data.\r\n\r\n```javascript\r\n// the target\r\nvar bullseye = Ktrl.createTarget(\"mySynth\");\r\n\r\n// define onData handler\r\nbullseye.onData(function (midimessage) {\r\n  var data = Ktrl.parse(midimessage);\r\n  if (data.type === \"noteon\") {\r\n    mySynth.noteOn(data.pitch, data.velocity);\r\n  }\r\n});\r\n```\r\n\r\n# Demo\r\n\r\nWill be posted shortly.\r\n\r\n# Related resources\r\n\r\n- [Web MIDI API W3C Editor's Draft](http://webaudio.github.io/web-midi-api/)\r\n- [Web MIDI API Shim by Chris Wilson](https://github.com/cwilso/WebMIDIAPIShim)\r\n- [Web Audio Demos by Chris Wilson](http://webaudiodemos.appspot.com/)\r\n\r\n# License\r\n\r\nPlease find the license in the source code.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}